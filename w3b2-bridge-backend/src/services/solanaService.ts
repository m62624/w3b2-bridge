import {
  Connection,
  PublicKey,
  Keypair,
  Transaction,
  SystemProgram,
  LAMPORTS_PER_SOL,
  TransactionInstruction,
} from '@solana/web3.js';
import { EventEmitter } from 'events';
import bs58 from 'bs58';
import { BlockchainEvent, CommandId, CommandConfig } from '../types/index';
import { serializeCommandConfig } from '../utils/blockchainUtils.js';

export class SolanaService extends EventEmitter {
  private connection: Connection;
  private programId: PublicKey;
  private adminKeypair: Keypair;
  private isListening: boolean = false;
  private lastProcessedSlot: number = 0;

  constructor() {
    super();
    this.connection = new Connection(
      process.env.SOLANA_RPC_URL || 'https://api.devnet.solana.com',
      'confirmed'
    );
    this.programId = new PublicKey(
      process.env.PROGRAM_ID || 'W3B2Bridge111111111111111111111111111111111'
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminPrivateKey = process.env.ADMIN_PRIVATE_KEY;
    if (adminPrivateKey) {
      this.adminKeypair = Keypair.fromSecretKey(bs58.decode(adminPrivateKey));
    } else {
      this.adminKeypair = Keypair.generate();
      console.log(
        'üîë –ù–æ–≤—ã–π –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:',
        bs58.encode(this.adminKeypair.secretKey)
      );
    }
  }

  async initialize(): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana
      const version = await this.connection.getVersion();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', version);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const balance = await this.connection.getBalance(
        this.adminKeypair.publicKey
      );
      console.log(
        `üí∞ –ë–∞–ª–∞–Ω—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${balance / LAMPORTS_PER_SOL} SOL`
      );

      if (balance < 0.1 * LAMPORTS_PER_SOL) {
        console.warn(
          '‚ö†Ô∏è –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å.'
        );
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Solana —Å–µ—Ä–≤–∏—Å–∞:', error);
      throw error;
    }
  }

  async startBlockchainListener(): Promise<void> {
    if (this.isListening) {
      console.log('üì° –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ');
      return;
    }

    this.isListening = true;
    console.log('üì° –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –±–ª–æ–∫—á–µ–π–Ω–∞...');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç
    this.lastProcessedSlot = await this.connection.getSlot();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    setInterval(async () => {
      await this.checkForNewTransactions();
    }, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  }

  private async checkForNewTransactions(): Promise<void> {
    try {
      const currentSlot = await this.connection.getSlot();

      if (currentSlot > this.lastProcessedSlot) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        const signatures = await this.connection.getSignaturesForAddress(
          this.programId,
          {
            before: undefined,
            until: undefined,
            limit: 100,
          }
        );

        for (const sigInfo of signatures) {
          if (sigInfo.slot > this.lastProcessedSlot) {
            await this.processTransaction(sigInfo.signature);
          }
        }

        this.lastProcessedSlot = currentSlot;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    }
  }

  private async processTransaction(signature: string): Promise<void> {
    try {
      const transaction = await this.connection.getTransaction(signature, {
        commitment: 'confirmed',
        maxSupportedTransactionVersion: 0,
      });

      if (!transaction) return;

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const message = transaction.transaction.message;
      const instructions =
        'instructions' in message ? message.instructions : [];

      for (const instruction of instructions) {
        if (instruction.programIdIndex !== undefined) {
          const accountKeys =
            'getAccountKeys' in message
              ? message.getAccountKeys()
              : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                (message as any).accountKeys;
          const programId = accountKeys[instruction.programIdIndex];
          if (programId.equals(this.programId)) {
            await this.processProgramInstruction(
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              instruction as any,
              signature,
              transaction
            );
          }
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    }
  }

  private async processProgramInstruction(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    instruction: any,
    signature: string,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    transaction: any
  ): Promise<void> {
    try {
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      const data = instruction.data;
      const commandId = data.readUInt8(0);

      const event: BlockchainEvent = {
        type: 'command_received',
        data: {
          commandId,
          signature,
          slot: transaction.slot,
          accounts: instruction.accounts || [],
        },
        signature,
        slot: transaction.slot,
        timestamp: Date.now(),
      };

      this.emit('blockchain_event', event);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      switch (commandId) {
        case CommandId.PUBLISH_PUBKEY:
          await this.handlePublishPubkey(instruction, signature);
          break;
        case CommandId.REQUEST_CONNECTION:
          await this.handleRequestConnection(instruction, signature);
          break;
        case CommandId.CRUD_CREATE:
        case CommandId.CRUD_READ:
        case CommandId.CRUD_UPDATE:
        case CommandId.CRUD_DELETE:
          await this.handleCrudOperation(instruction, signature, commandId);
          break;
        default:
          console.log(`üìù –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ${commandId} –æ—Ç ${signature}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:', error);
    }
  }

  private async handlePublishPubkey(
    _instruction: any,
    _signature: string
  ): Promise<void> {
    console.log('üîë –ü–æ–ª—É—á–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞');
  }

  private async handleRequestConnection(
    _instruction: any,
    _signature: string
  ): Promise<void> {
    console.log('üîå –ó–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
  }

  private async handleCrudOperation(
    _instruction: any,
    _signature: string,
    commandId: number
  ): Promise<void> {
    console.log(`üìä CRUD –æ–ø–µ—Ä–∞—Ü–∏—è ${commandId}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å blockchain –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ blockchain –ø—Ä–æ–≥—Ä–∞–º–º–µ
   */
  async registerAdmin(fundingAmount: number): Promise<string> {
    try {
      const transaction = new Transaction();

      // –ù–∞—Ö–æ–¥–∏–º PDA –¥–ª—è admin –ø—Ä–æ—Ñ–∏–ª—è
      const [adminProfilePDA] = PublicKey.findProgramAddressSync(
        [Buffer.from('admin'), this.adminKeypair.publicKey.toBuffer()],
        this.programId
      );

      // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const instruction = new TransactionInstruction({
        keys: [
          {
            pubkey: adminProfilePDA,
            isSigner: false,
            isWritable: true,
          },
          {
            pubkey: this.adminKeypair.publicKey,
            isSigner: true,
            isWritable: true,
          },
          {
            pubkey: this.adminKeypair.publicKey, // payer
            isSigner: true,
            isWritable: true,
          },
          {
            pubkey: SystemProgram.programId,
            isSigner: false,
            isWritable: false,
          },
        ],
        programId: this.programId,
        data: Buffer.concat([
          Buffer.from([0]), // register_admin discriminator
          Buffer.alloc(8)
            .fill(0)
            .map((_, i) => (fundingAmount >> (i * 8)) & 0xff), // funding_amount as u64
        ]),
      });

      transaction.add(instruction);

      const signature = await this.connection.sendTransaction(transaction, [
        this.adminKeypair,
      ]);
      await this.connection.confirmTransaction(signature);

      console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', signature);
      return signature;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  async requestFunding(
    userWallet: PublicKey,
    amount: number,
    targetAdmin: PublicKey
  ): Promise<string> {
    try {
      const transaction = new Transaction();

      // –ù–∞—Ö–æ–¥–∏–º PDA –¥–ª—è funding request
      const [fundingRequestPDA] = PublicKey.findProgramAddressSync(
        [
          Buffer.from('funding'),
          userWallet.toBuffer(),
          this.adminKeypair.publicKey.toBuffer(), // payer
        ],
        this.programId
      );

      const instruction = new TransactionInstruction({
        keys: [
          {
            pubkey: fundingRequestPDA,
            isSigner: false,
            isWritable: true,
          },
          {
            pubkey: this.adminKeypair.publicKey, // payer
            isSigner: true,
            isWritable: true,
          },
          {
            pubkey: userWallet,
            isSigner: false,
            isWritable: false,
          },
          {
            pubkey: SystemProgram.programId,
            isSigner: false,
            isWritable: false,
          },
        ],
        programId: this.programId,
        data: Buffer.concat([
          Buffer.from([1]), // request_funding discriminator
          Buffer.alloc(8)
            .fill(0)
            .map((_, i) => (amount >> (i * 8)) & 0xff), // amount as u64
          targetAdmin.toBuffer(), // target_admin as Pubkey (32 bytes)
        ]),
      });

      transaction.add(instruction);

      const signature = await this.connection.sendTransaction(transaction, [
        this.adminKeypair,
      ]);
      await this.connection.confirmTransaction(signature);

      console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω:', signature);
      return signature;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ:', error);
      throw error;
    }
  }

  /**
   * –û–¥–æ–±—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  async approveFunding(
    fundingRequestPDA: PublicKey,
    userWallet: PublicKey
  ): Promise<string> {
    try {
      const transaction = new Transaction();

      // –ù–∞—Ö–æ–¥–∏–º PDA –¥–ª—è admin –ø—Ä–æ—Ñ–∏–ª—è
      const [adminProfilePDA] = PublicKey.findProgramAddressSync(
        [Buffer.from('admin'), this.adminKeypair.publicKey.toBuffer()],
        this.programId
      );

      const instruction = new TransactionInstruction({
        keys: [
          {
            pubkey: adminProfilePDA,
            isSigner: false,
            isWritable: true,
          },
          {
            pubkey: fundingRequestPDA,
            isSigner: false,
            isWritable: true,
          },
          {
            pubkey: userWallet,
            isSigner: false,
            isWritable: true,
          },
          {
            pubkey: this.adminKeypair.publicKey, // admin_authority
            isSigner: true,
            isWritable: false,
          },
          {
            pubkey: SystemProgram.programId,
            isSigner: false,
            isWritable: false,
          },
        ],
        programId: this.programId,
        data: Buffer.from([2]), // approve_funding discriminator
      });

      transaction.add(instruction);

      const signature = await this.connection.sendTransaction(transaction, [
        this.adminKeypair,
      ]);
      await this.connection.confirmTransaction(signature);

      console.log('‚úÖ –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ:', signature);
      return signature;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ blockchain
   */
  async dispatchCommand(
    commandId: number,
    mode: number,
    payload: Uint8Array,
    targetAdmin: PublicKey
  ): Promise<string> {
    try {
      const transaction = new Transaction();

      const data = Buffer.concat([
        Buffer.from([3]), // dispatch_command discriminator
        Buffer.alloc(8)
          .fill(0)
          .map((_, i) => (commandId >> (i * 8)) & 0xff), // command_id as u64
        Buffer.from([mode]), // mode as u8
        Buffer.alloc(4)
          .fill(0)
          .map((_, i) => (payload.length >> (i * 8)) & 0xff), // payload length as u32
        Buffer.from(payload), // payload
        targetAdmin.toBuffer(), // target_admin as Pubkey
      ]);

      const instruction = new TransactionInstruction({
        keys: [
          {
            pubkey: this.adminKeypair.publicKey, // authority
            isSigner: true,
            isWritable: false,
          },
        ],
        programId: this.programId,
        data,
      });

      transaction.add(instruction);

      const signature = await this.connection.sendTransaction(transaction, [
        this.adminKeypair,
      ]);
      await this.connection.confirmTransaction(signature);

      console.log(`üì§ –ö–æ–º–∞–Ω–¥–∞ ${commandId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:`, signature);
      return signature;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç CommandConfig –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
   */
  async dispatchCommandConfig(
    commandId: number,
    mode: number,
    config: CommandConfig,
    targetAdmin: PublicKey
  ): Promise<string> {
    try {
      const serializedConfig = serializeCommandConfig(config);
      return await this.dispatchCommand(
        commandId,
        mode,
        serializedConfig,
        targetAdmin
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ CommandConfig:', error);
      throw error;
    }
  }

  getAdminPublicKey(): PublicKey {
    return this.adminKeypair.publicKey;
  }

  getProgramId(): PublicKey {
    return this.programId;
  }

  stopListening(): void {
    this.isListening = false;
    console.log('üõë –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }
}
