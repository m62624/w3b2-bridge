import { Server as SocketIOServer } from 'socket.io';
import { Server as HTTPServer } from 'http';
import { EventEmitter } from 'events';
import { BridgeEvent } from '../types/bridge.proto';

export class WebSocketService extends EventEmitter {
  private io: SocketIOServer;
  private connectedClients: Map<string, any> = new Map();

  constructor(server: HTTPServer) {
    super();

    this.io = new SocketIOServer(server, {
      cors: {
        origin: process.env.FRONTEND_URL || 'http://localhost:3000',
        methods: ['GET', 'POST'],
        credentials: true,
      },
      transports: ['websocket', 'polling'],
    });

    this.setupEventHandlers();
  }

  private setupEventHandlers() {
    this.io.on('connection', socket => {
      console.log(`üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
      this.connectedClients.set(socket.id, socket);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      socket.emit('connected', {
        message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ W3B2 Bridge —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
        timestamp: Date.now(),
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      socket.on('disconnect', reason => {
        console.log(`üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}, –ø—Ä–∏—á–∏–Ω–∞: ${reason}`);
        this.connectedClients.delete(socket.id);
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
      socket.on('subscribe_events', data => {
        console.log(`üì° –ö–ª–∏–µ–Ω—Ç ${socket.id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è:`, data);
        socket.join('blockchain_events');
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–æ–±—ã—Ç–∏–π
      socket.on('unsubscribe_events', () => {
        console.log(`üì° –ö–ª–∏–µ–Ω—Ç ${socket.id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π`);
        socket.leave('blockchain_events');
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
      socket.on('get_status', () => {
        socket.emit('status', {
          connected: true,
          clientsCount: this.connectedClients.size,
          timestamp: Date.now(),
        });
      });
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
  public broadcastEvent(event: BridgeEvent) {
    console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º:', event);
    this.io.to('blockchain_events').emit('blockchain_event', event);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
  public sendToClient(clientId: string, event: string, data: any) {
    const client = this.connectedClients.get(clientId);
    if (client) {
      client.emit(event, data);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
  public broadcastNotification(
    type: 'success' | 'error' | 'warning' | 'info',
    message: string
  ) {
    this.io.emit('notification', {
      type,
      message,
      timestamp: Date.now(),
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  public getConnectionStats() {
    return {
      totalClients: this.connectedClients.size,
      subscribedClients:
        this.io.sockets.adapter.rooms.get('blockchain_events')?.size || 0,
      timestamp: Date.now(),
    };
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
  public stop() {
    this.io.close();
    console.log('üîå WebSocket —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}
