import * as grpc from '@grpc/grpc-js';
import * as protoLoader from '@grpc/proto-loader';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { EventEmitter } from 'events';
import { BridgeEvent, Empty, CommandMode } from '../types/bridge.proto';

// –ü–æ–ª—É—á–µ–Ω–∏–µ __dirname –≤ ES –º–æ–¥—É–ª—è—Ö
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∑–∫–∞ proto —Ñ–∞–π–ª–∞
const PROTO_PATH = join(__dirname, '../../proto/bridge.proto');
const packageDefinition = protoLoader.loadSync(PROTO_PATH, {
  keepCase: true,
  longs: String,
  enums: String,
  defaults: true,
  oneofs: true,
});

const bridgeProto = grpc.loadPackageDefinition(
  packageDefinition
) as unknown as any;

export class GrpcService extends EventEmitter {
  private server: grpc.Server;
  private client: any;
  private eventStreams: Set<grpc.ServerWritableStream<Empty, BridgeEvent>> =
    new Set();
  private connectorClient: any;
  private isConnected: boolean = false;

  constructor() {
    super();
    this.server = new grpc.Server();
    this.setupServices();
    this.setupConnectorClient();
  }

  private setupServices() {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è BridgeService
    this.server.addService(bridgeProto.bridge.BridgeService.service, {
      streamEvents: this.streamEvents.bind(this),
    });
  }

  private setupConnectorClient() {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—É
    const connectorUrl = process.env.CONNECTOR_GRPC_URL || 'localhost:50051';
    this.connectorClient = new bridgeProto.bridge.BridgeService(
      connectorUrl,
      grpc.credentials.createInsecure()
    );
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
  public async connectToConnector(): Promise<void> {
    try {
      console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ gRPC –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—É...');

      const call = this.connectorClient.streamEvents({});

      call.on('data', (event: BridgeEvent) => {
        console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞:', event);
        this.isConnected = true;

        // –û–±–æ–≥–∞—â–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const enrichedEvent = this.enrichEvent(event);

        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        this.emit('blockchain_event', enrichedEvent);

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
        this.broadcastEvent(enrichedEvent);
      });

      call.on('error', (error: any) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–º:', error);
        this.isConnected = false;

        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          this.connectToConnector();
        }, 5000);
      });

      call.on('end', () => {
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ');
        this.isConnected = false;

        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          this.connectToConnector();
        }, 2000);
      });

      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—É:', error);
      this.isConnected = false;

      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        this.connectToConnector();
      }, 10000);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  public isConnectorConnected(): boolean {
    return this.isConnected;
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π
  private streamEvents(call: grpc.ServerWritableStream<Empty, BridgeEvent>) {
    console.log('–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å—Ç—Ä–∏–º—É —Å–æ–±—ã—Ç–∏–π');

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤
    this.eventStreams.add(call);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    call.on('cancelled', () => {
      console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å—Ç—Ä–∏–º–∞ —Å–æ–±—ã—Ç–∏–π');
      this.eventStreams.delete(call);
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const welcomeEvent: BridgeEvent = {
      adminRegistered: {
        admin: 'system',
        initialFunding: 0,
        ts: Date.now(),
      },
    };

    call.write(welcomeEvent);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
  public broadcastEvent(event: BridgeEvent) {
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º:', event);

    this.eventStreams.forEach(stream => {
      try {
        stream.write(event);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç—É:', error);
        this.eventStreams.delete(stream);
      }
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
  public createAdminRegisteredEvent(
    admin: string,
    initialFunding: number
  ): BridgeEvent {
    return {
      adminRegistered: {
        admin,
        initialFunding,
        ts: Date.now(),
      },
    };
  }

  public createUserRegisteredEvent(
    user: string,
    initialBalance: number
  ): BridgeEvent {
    return {
      userRegistered: {
        user,
        initialBalance,
        ts: Date.now(),
      },
    };
  }

  public createAdminDeactivatedEvent(admin: string): BridgeEvent {
    return {
      adminDeactivated: {
        admin,
        ts: Date.now(),
      },
    };
  }

  public createUserDeactivatedEvent(user: string): BridgeEvent {
    return {
      userDeactivated: {
        user,
        ts: Date.now(),
      },
    };
  }

  public createFundingRequestedEvent(
    userWallet: string,
    targetAdmin: string,
    amount: number
  ): BridgeEvent {
    return {
      fundingRequested: {
        userWallet,
        targetAdmin,
        amount,
        ts: Date.now(),
      },
    };
  }

  public createFundingApprovedEvent(
    userWallet: string,
    approvedBy: string,
    amount: number
  ): BridgeEvent {
    return {
      fundingApproved: {
        userWallet,
        approvedBy,
        amount,
        ts: Date.now(),
      },
    };
  }

  public createCommandEvent(
    sender: string,
    target: string,
    commandId: number,
    mode: CommandMode,
    payload: Uint8Array
  ): BridgeEvent {
    return {
      commandEvent: {
        sender,
        target,
        commandId,
        mode,
        payload,
        ts: Date.now(),
      },
    };
  }

  // –ó–∞–ø—É—Å–∫ gRPC —Å–µ—Ä–≤–µ—Ä–∞
  public start(port: string = '50052') {
    return new Promise<void>((resolve, reject) => {
      this.server.bindAsync(
        `0.0.0.0:${port}`,
        grpc.ServerCredentials.createInsecure(),
        async (err, port) => {
          if (err) {
            reject(err);
            return;
          }
          this.server.start();
          console.log(`gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);

          // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
          await this.connectToConnector();

          resolve();
        }
      );
    });
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ gRPC —Å–µ—Ä–≤–µ—Ä–∞
  public stop() {
    return new Promise<void>(resolve => {
      this.server.forceShutdown();
      console.log('gRPC —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      resolve();
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  public getActiveConnectionsCount(): number {
    return this.eventStreams.size;
  }

  // –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  private enrichEvent(event: BridgeEvent): BridgeEvent & {
    id: string;
    processedAt: number;
    source: string;
    eventType: string;
  } {
    const eventId = this.generateEventId();
    const processedAt = Date.now();
    const source = 'grpc_connector';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    let eventType = 'unknown';
    if (event.adminRegistered) eventType = 'admin_registered';
    else if (event.userRegistered) eventType = 'user_registered';
    else if (event.adminDeactivated) eventType = 'admin_deactivated';
    else if (event.userDeactivated) eventType = 'user_deactivated';
    else if (event.fundingRequested) eventType = 'funding_requested';
    else if (event.fundingApproved) eventType = 'funding_approved';
    else if (event.commandEvent) eventType = 'command_event';

    return {
      ...event,
      id: eventId,
      processedAt,
      source,
      eventType,
    };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–æ–±—ã—Ç–∏—è
  private generateEventId(): string {
    return `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  public getEventStats() {
    return {
      totalConnections: this.eventStreams.size,
      isConnectorConnected: this.isConnected,
      lastEventTime: Date.now(),
      connectorUrl: process.env.CONNECTOR_GRPC_URL || 'localhost:50051',
    };
  }
}
