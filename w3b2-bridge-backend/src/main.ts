import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import dotenv from 'dotenv';
import { SolanaService } from './services/solanaService';
import { EncryptionService } from './services/encryptionService';
import { DatabaseService } from './services/databaseService';
import { GrpcService } from './services/grpcService';
import { apiRoutes } from './routes/api';
import { errorHandler, notFoundHandler } from './middleware/errorHandler';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;
const GRPC_PORT = process.env.GRPC_PORT || '50051';

// Middleware
app.use(helmet());
app.use(cors());
app.use(morgan('combined'));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const solanaService = new SolanaService();
const encryptionService = new EncryptionService();
const databaseService = new DatabaseService();
const grpcService = new GrpcService();

// –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.locals.solanaService = solanaService;
app.locals.encryptionService = encryptionService;
app.locals.databaseService = databaseService;
app.locals.grpcService = grpcService;

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.use('/api', apiRoutes);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use(notFoundHandler);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use(errorHandler);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    await solanaService.initialize();
    await databaseService.initialize();

    // –ó–∞–ø—É—Å–∫ gRPC —Å–µ—Ä–≤–µ—Ä–∞
    await grpcService.start(GRPC_PORT);

    // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –±–ª–æ–∫—á–µ–π–Ω–∞
    await solanaService.startBlockchainListener();

    app.listen(PORT, () => {
      console.log(`üöÄ W3B2 Backend Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üîå gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${GRPC_PORT}`);
      console.log(`üì° –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ Solana –±–ª–æ–∫—á–µ–π–Ω–∞...`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

startServer();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  try {
    await grpcService.stop();
    console.log('‚úÖ gRPC —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ gRPC —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  try {
    await grpcService.stop();
    console.log('‚úÖ gRPC —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ gRPC —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
});
