syntax = "proto3";

package bridge;

// --- Common and Helper Messages ---

// An empty message, used for requests that do not require parameters.
message Empty {}

// Represents a single entry in an admin's price list.
message PriceEntry {
  // The command identifier. Corresponds to `u16` in Rust.
  uint32 command_id = 1;
  // The price in lamports. Corresponds to `u64` in Rust.f
  uint64 price = 2;
}

// --- Admin Events ---

message AdminProfileRegistered {
  // Pubkey of the profile's owner (`authority`).
  // solana_sdk::pubkey::Pubkey is represented as a string.
  string authority = 1;
  // Pubkey for off-chain communication.
  string communication_pubkey = 2;
  // Unix timestamp of the creation.
  int64 ts = 3;
}

message AdminCommKeyUpdated {
  string authority = 1;
  string new_comm_pubkey = 2;
  int64 ts = 3;
}

message AdminPricesUpdated {
  string authority = 1;
  // The new price list.
  // Vec<(u16, u64)> is represented as a repeated PriceEntry message.
  repeated PriceEntry new_prices = 2;
  int64 ts = 3;
}

message AdminFundsWithdrawn {
  string authority = 1;
  uint64 amount = 2;
  string destination = 3;
  int64 ts = 4;
}

message AdminProfileClosed {
  string authority = 1;
  int64 ts = 2;
}

message AdminCommandDispatched {
  // Pubkey of the sender admin.
  string sender = 1;
  // Pubkey of the target user.
  string target_user_authority = 2;
  // The command identifier. Corresponds to `u16` in Rust.
  uint32 command_id = 3;
  // The payload.
  // Vec<u8> is represented as bytes.
  bytes payload = 4;
  int64 ts = 5;
}

// --- User Events ---

message UserProfileCreated {
  // Pubkey of the user profile's owner (`authority`).
  string authority = 1;
  // Pubkey of the AdminProfile PDA that this user is associated with.
  string target_admin = 2;
  string communication_pubkey = 3;
  int64 ts = 4;
}

message UserCommKeyUpdated {
  string authority = 1;
  string new_comm_pubkey = 2;
  int64 ts = 3;
}

message UserFundsDeposited {
  string authority = 1;
  uint64 amount = 2;
  uint64 new_deposit_balance = 3;
  int64 ts = 4;
}

message UserFundsWithdrawn {
  string authority = 1;
  uint64 amount = 2;
  string destination = 3;
  uint64 new_deposit_balance = 4;
  int64 ts = 5;
}

message UserProfileClosed {
  string authority = 1;
  int64 ts = 2;
}

// --- Operational Events ---

message UserCommandDispatched {
  // Pubkey of the sender user.
  string sender = 1;
  // Pubkey of the target admin.
  string target_admin_authority = 2;
  // The command identifier. Corresponds to `u16` in Rust.
  uint32 command_id = 3;
  uint64 price_paid = 4;
  bytes payload = 5;
  int64 ts = 6;
}

message OffChainActionLogged {
  // Pubkey of the actor (user or admin).
  string actor = 1;
  uint64 session_id = 2;
  // The action code. Corresponds to `u16` in Rust.
  uint32 action_code = 3;
  int64 ts = 4;
}

// --- Main Event Wrapper ---

// This wrapper message uses a `oneof` field to contain any of the possible
// event types. This is highly convenient for streaming: a connector receives a
// single `BridgeEvent` type and can use a `switch` or `match` statement to
// determine which specific event occurred.
message BridgeEvent {
  oneof event {
    AdminProfileRegistered admin_profile_registered = 1;
    AdminCommKeyUpdated admin_comm_key_updated = 2;
    AdminPricesUpdated admin_prices_updated = 3;
    AdminFundsWithdrawn admin_funds_withdrawn = 4;
    AdminProfileClosed admin_profile_closed = 5;
    AdminCommandDispatched admin_command_dispatched = 6;
    UserProfileCreated user_profile_created = 7;
    UserCommKeyUpdated user_comm_key_updated = 8;
    UserFundsDeposited user_funds_deposited = 9;
    UserFundsWithdrawn user_funds_withdrawn = 10;
    UserProfileClosed user_profile_closed = 11;
    UserCommandDispatched user_command_dispatched = 12;
    OffChainActionLogged off_chain_action_logged = 13;
  }
}

// --- gRPC Service Definition ---

// This service defines a streaming API for events. A `w3b2-connector` can
// implement this service to provide a standardized event stream to other
// services.
service BridgeService { rpc StreamEvents(Empty) returns (stream BridgeEvent); }