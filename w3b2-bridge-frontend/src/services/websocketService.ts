import { io, Socket } from 'socket.io-client';
import { EventEmitter } from 'events';

export interface WebSocketEvent {
  type: 'blockchain_event' | 'notification' | 'status' | 'connected';
  data: any;
  timestamp: number;
}

export interface ConnectionStatus {
  connected: boolean;
  clientsCount: number;
  timestamp: number;
}

export class WebSocketService extends EventEmitter {
  private socket: Socket | null = null;
  private isConnected: boolean = false;
  private reconnectAttempts: number = 0;
  private maxReconnectAttempts: number = 5;
  private reconnectInterval: number = 5000;

  constructor() {
    super();
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
  public connect(serverUrl: string = process.env.REACT_APP_WS_URL || 'http://localhost:3001') {
    if (this.socket?.connected) {
      console.log('WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return;
    }

    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É:', serverUrl);

    this.socket = io(serverUrl, {
      transports: ['websocket', 'polling'],
      timeout: 10000,
      forceNew: true,
    });

    this.setupEventHandlers();
  }

  private setupEventHandlers() {
    if (!this.socket) return;

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    this.socket.on('connect', () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω:', this.socket?.id);
      this.isConnected = true;
      this.reconnectAttempts = 0;
      this.emit('connected', { connected: true, timestamp: Date.now() });
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    this.socket.on('disconnect', (reason: string) => {
      console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
      this.isConnected = false;
      this.emit('disconnected', { reason, timestamp: Date.now() });
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      if (this.reconnectAttempts < this.maxReconnectAttempts) {
        this.reconnectAttempts++;
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);
        setTimeout(() => {
          this.connect();
        }, this.reconnectInterval);
      }
    });

    // –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.socket.on('connect_error', (error: Error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
      this.emit('error', { error, timestamp: Date.now() });
    });

    // –°–æ–±—ã—Ç–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    this.socket.on('blockchain_event', (event: any) => {
      console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –±–ª–æ–∫—á–µ–π–Ω–∞:', event);
      this.emit('blockchain_event', event);
    });

    this.socket.on('notification', (notification: any) => {
      console.log('üîî –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notification);
      this.emit('notification', notification);
    });

    this.socket.on('status', (status: any) => {
      console.log('üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:', status);
      this.emit('status', status);
    });

    this.socket.on('connected', (data: any) => {
      console.log('üéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:', data);
      this.emit('server_connected', data);
    });
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –±–ª–æ–∫—á–µ–π–Ω–∞
  public subscribeToEvents() {
    if (this.socket?.connected) {
      this.socket.emit('subscribe_events', { timestamp: Date.now() });
      console.log('üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –±–ª–æ–∫—á–µ–π–Ω–∞');
    }
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π –±–ª–æ–∫—á–µ–π–Ω–∞
  public unsubscribeFromEvents() {
    if (this.socket?.connected) {
      this.socket.emit('unsubscribe_events');
      console.log('üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π –±–ª–æ–∫—á–µ–π–Ω–∞');
    }
  }

  // –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
  public requestStatus() {
    if (this.socket?.connected) {
      this.socket.emit('get_status');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  public sendMessage(event: string, data: any) {
    if (this.socket?.connected) {
      this.socket.emit(event, data);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  public getConnectionStatus(): boolean {
    return this.isConnected && this.socket?.connected === true;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–∫–µ—Ç–∞
  public getSocketId(): string | undefined {
    return this.socket?.id;
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  public disconnect() {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
      this.isConnected = false;
      console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  public reconnect() {
    this.disconnect();
    setTimeout(() => {
      this.connect();
    }, 1000);
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  public cleanup() {
    this.removeAllListeners();
    this.disconnect();
  }
}

// –°–æ–∑–¥–∞–µ–º singleton instance
export const webSocketService = new WebSocketService();
export default webSocketService;
