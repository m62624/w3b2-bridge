import {
  Connection,
  PublicKey,
  Keypair,
  Transaction,
  SystemProgram,
  LAMPORTS_PER_SOL,
  TransactionInstruction,
  sendAndConfirmTransaction,
} from '@solana/web3.js';
import { CommandId, CommandMode, Destination } from '../types/index.js';

export class SolanaService {
  private connection: Connection;
  private programId: PublicKey;
  private wallet: Keypair | null = null;

  constructor() {
    this.connection = new Connection(
      process.env.REACT_APP_SOLANA_RPC_URL || 'https://api.devnet.solana.com',
      'confirmed'
    );
    this.programId = new PublicKey(
      process.env.REACT_APP_PROGRAM_ID || 'W3B2Bridge111111111111111111111111111111111'
    );
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
  initializeWallet(privateKey?: string): Keypair {
    if (privateKey) {
      try {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ base58
        const secretKey = Buffer.from(privateKey, 'base64');
        this.wallet = Keypair.fromSecretKey(secretKey);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:', error);
        this.wallet = Keypair.generate();
      }
    } else {
      this.wallet = Keypair.generate();
    }

    console.log('üîë –ö–æ—à–µ–ª–µ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', this.wallet.publicKey.toBase58());
    return this.wallet;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
  getPublicKey(): PublicKey | null {
    return this.wallet?.publicKey || null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (–¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞)
  getPrivateKey(): string | null {
    if (!this.wallet) return null;
    return Buffer.from(this.wallet.secretKey).toString('base64');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  async getBalance(): Promise<number> {
    if (!this.wallet) throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    const balance = await this.connection.getBalance(this.wallet.publicKey);
    return balance / LAMPORTS_PER_SOL;
  }

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
  async requestFunding(amount: number, targetAdmin: string): Promise<string> {
    if (!this.wallet) throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    const transaction = new Transaction();
    
    const instruction = new TransactionInstruction({
      keys: [
        { pubkey: this.wallet.publicKey, isSigner: true, isWritable: true },
        { pubkey: new PublicKey(targetAdmin), isSigner: false, isWritable: false },
        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
      ],
      programId: this.programId,
      data: Buffer.from([
        CommandId.REQUEST_CONNECTION, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        ...Buffer.alloc(8).fill(amount), // amount
      ]),
    });

    transaction.add(instruction);
    
    const signature = await sendAndConfirmTransaction(
      this.connection,
      transaction,
      [this.wallet]
    );
    
    console.log('üí∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', signature);
    return signature;
  }

  // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
  async publishPublicKey(): Promise<string> {
    if (!this.wallet) throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    const transaction = new Transaction();
    
    const instruction = new TransactionInstruction({
      keys: [
        { pubkey: this.wallet.publicKey, isSigner: true, isWritable: true },
        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
      ],
      programId: this.programId,
      data: Buffer.from([
        CommandId.PUBLISH_PUBKEY,
        ...this.wallet.publicKey.toBytes(),
      ]),
    });

    transaction.add(instruction);
    
    const signature = await sendAndConfirmTransaction(
      this.connection,
      transaction,
      [this.wallet]
    );
    
    console.log('üîë –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:', signature);
    return signature;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
  async dispatchCommand(
    commandId: CommandId,
    mode: CommandMode,
    payload: Uint8Array,
    targetAdmin: string
  ): Promise<string> {
    if (!this.wallet) throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    const transaction = new Transaction();
    
    const data = Buffer.concat([
      Buffer.from([commandId, mode]),
      Buffer.from(payload)
    ]);

    const instruction = new TransactionInstruction({
      keys: [
        { pubkey: this.wallet.publicKey, isSigner: true, isWritable: true },
        { pubkey: new PublicKey(targetAdmin), isSigner: false, isWritable: false },
      ],
      programId: this.programId,
      data,
    });

    transaction.add(instruction);
    
    const signature = await sendAndConfirmTransaction(
      this.connection,
      transaction,
      [this.wallet]
    );
    
    console.log(`üì§ –ö–æ–º–∞–Ω–¥–∞ ${commandId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:`, signature);
    return signature;
  }

  // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
  async createRecord(data: any, targetAdmin: string): Promise<string> {
    const payload = this.serializeData(data);
    return await this.dispatchCommand(
      CommandId.CRUD_CREATE,
      CommandMode.RequestResponse,
      payload,
      targetAdmin
    );
  }

  async readRecord(recordId: string, targetAdmin: string): Promise<string> {
    const payload = this.serializeData({ id: recordId });
    return await this.dispatchCommand(
      CommandId.CRUD_READ,
      CommandMode.RequestResponse,
      payload,
      targetAdmin
    );
  }

  async updateRecord(recordId: string, data: any, targetAdmin: string): Promise<string> {
    const payload = this.serializeData({ id: recordId, data });
    return await this.dispatchCommand(
      CommandId.CRUD_UPDATE,
      CommandMode.RequestResponse,
      payload,
      targetAdmin
    );
  }

  async deleteRecord(recordId: string, targetAdmin: string): Promise<string> {
    const payload = this.serializeData({ id: recordId });
    return await this.dispatchCommand(
      CommandId.CRUD_DELETE,
      CommandMode.RequestResponse,
      payload,
      targetAdmin
    );
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
  async startSession(destination: Destination, targetAdmin: string): Promise<string> {
    const payload = this.serializeData({ destination });
    return await this.dispatchCommand(
      CommandId.START_SESSION,
      CommandMode.RequestResponse,
      payload,
      targetAdmin
    );
  }

  async endSession(targetAdmin: string): Promise<string> {
    return await this.dispatchCommand(
      CommandId.END_SESSION,
      CommandMode.OneWay,
      new Uint8Array(),
      targetAdmin
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private serializeData(data: any): Uint8Array {
    // –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Borsh)
    const jsonString = JSON.stringify(data);
    return new TextEncoder().encode(jsonString);
  }

  private deserializeData(data: Uint8Array): any {
    const jsonString = new TextDecoder().decode(data);
    return JSON.parse(jsonString);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
  getProgramId(): PublicKey {
    return this.programId;
  }

  getConnection(): Connection {
    return this.connection;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏
  async isConnected(): Promise<boolean> {
    try {
      await this.connection.getVersion();
      return true;
    } catch (error) {
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  async getRecentTransactions(limit: number = 10): Promise<any[]> {
    if (!this.wallet) throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    const signatures = await this.connection.getSignaturesForAddress(
      this.wallet.publicKey,
      { limit }
    );

    return signatures;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  async getTransactionInfo(signature: string): Promise<any> {
    const transaction = await this.connection.getTransaction(signature, {
      commitment: 'confirmed',
      maxSupportedTransactionVersion: 0,
    });

    return transaction;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
  generateNewWallet(): Keypair {
    this.wallet = Keypair.generate();
    console.log('üîë –ù–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', this.wallet.publicKey.toBase58());
    return this.wallet;
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞
  exportWallet(): { publicKey: string; privateKey: string } | null {
    if (!this.wallet) return null;

    return {
      publicKey: this.wallet.publicKey.toBase58(),
      privateKey: this.getPrivateKey()!,
    };
  }

  // –ò–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞
  importWallet(privateKey: string): boolean {
    try {
      const secretKey = Buffer.from(privateKey, 'base64');
      this.wallet = Keypair.fromSecretKey(secretKey);
      console.log('üîë –ö–æ—à–µ–ª–µ–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', this.wallet.publicKey.toBase58());
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞:', error);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const solanaService = new SolanaService();
export default solanaService;
