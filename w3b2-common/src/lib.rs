// w3b2-common/src/lib.rs
//! Common types for W3B2 (on-chain <-> off-chain).
//! Minimal, Borsh-serializable, cross-crate compatible.

use borsh::{BorshDeserialize, BorshSerialize};

/// AccountType: whether program-created wallet or user-provided wallet.
#[derive(Debug, Clone, PartialEq, Eq, BorshDeserialize, BorshSerialize)]
pub enum AccountType {
    /// Wallet generated by client (new keypair).
    NewWallet,
    /// Wallet the user already owns and wants to link.
    ExistingWallet,
}

/// Minimal on-chain user record stored in PDA.
#[derive(Debug, Clone, PartialEq, Eq, BorshDeserialize, BorshSerialize)]
pub struct UserAccount {
    /// Controller / registrant pubkey as raw bytes ([u8;32]).
    pub owner: [u8; 32],
    /// Whether created wallet or linked existing.
    pub account_type: AccountType,
}

/// Command mode: wait-response (two-step) or one-way (fire-and-forget).
#[derive(Debug, Clone, PartialEq, Eq, BorshDeserialize, BorshSerialize)]
pub enum CommandMode {
    /// Bridge should wait for response from target service.
    RequestResponse = 0,
    /// Bridge executes off-chain action; no on-chain response expected.
    OneWay = 1,
}

/// Minimal on-chain command descriptor.
/// Do NOT store large payloads — only small encrypted `CommandConfig`.
#[derive(Debug, Clone, PartialEq, Eq, BorshDeserialize, BorshSerialize)]
pub struct CommandRecord {
    /// Sender pubkey as raw bytes (author of transaction).
    pub sender: [u8; 32],
    /// Numeric command id (protocol-level).
    pub command_id: u64,
    /// Command mode (RequestResponse / OneWay).
    pub mode: CommandMode,
    /// Encrypted payload (Borsh(CommandConfig) with service pubkey).
    pub payload: Vec<u8>,
}

/// Destination for off-chain service connection.
#[derive(Debug, Clone, PartialEq, Eq, BorshDeserialize, BorshSerialize)]
pub enum Destination {
    IpV4([u8; 4], u16),  // 4 bytes IP + 2 bytes port
    IpV6([u8; 16], u16), // 16 bytes IP + 2 bytes port
    Url(String),         // prefixed with 4-byte length by Borsh
}

/// CommandConfig — structured data client serializes then encrypts.
/// Contains session info and target destination.
#[derive(Debug, Clone, PartialEq, Eq, BorshDeserialize, BorshSerialize)]
pub struct CommandConfig {
    /// Session identifier (nonce).
    pub session_id: u64,
    /// Session key (AES-256 key bytes).
    pub session_key: [u8; 32],
    /// Destination (ip/port or url).
    pub destination: Destination,
    /// Optional metadata (small).
    pub meta: Vec<u8>,
}
